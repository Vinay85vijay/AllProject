package com.sendmail.Resignation.Mail;

import static org.junit.Assert.fail;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.verify;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;

import com.sendmail.Resignation.Mail.dto.EmailRequestDto;
import com.sendmail.Resignation.Mail.dto.UserDetails;
import com.sendmail.Resignation.Mail.service.EmailService;
import com.sendmail.Resignation.Mail.service.EmailServiceImpl;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;

@SpringBootTest
class ResignationMailApplicationTests {
	 @Mock
     private EmailService emailSender;
    @Mock
    JavaMailSender mailsender;

     @InjectMocks
     private EmailServiceImpl emailService;
     @Mock
     UserDetails userDetails;
     @Mock
     EmailRequestDto emailDto;
	@Test
	void contextLoads() throws MessagingException, Exception {
		userDetails.setEmpId(123);
     	userDetails.setName("vinay");
     	userDetails.setNoticePeriod("20days");
     	userDetails.setPosition("SWE");
     	userDetails.setReasons("home sick");
     	
     	MimeMessage message = mailsender.createMimeMessage();
		MimeMessageHelper helper = new MimeMessageHelper(message, true,"utf-8"); 
		helper.setFrom( new InternetAddress("Employee <noreply@springboot.com>"));
		helper.setTo("vinaykumar08civil@gmail.com");
		//helper.set
		helper.setSubject("resign");
		helper.setText("testing the service");
		
		helper.setBcc("vinay@mirafra.com");
		helper.setCc("vvinnu48@gmail.com");

		 doThrow(new RuntimeException("Email not sent")).when(emailSender).sendEmailWithAttachment(eq(emailDto), eq(userDetails));

         try {
             emailService.sendEmailWithAttachment(emailDto, userDetails);
             fail("Expected RuntimeException to be thrown");
         } catch (RuntimeException e) {
             // expected exception
         }

         verify(emailSender).sendEmailWithAttachment(eq(emailDto), eq(userDetails));
     }
		
	}
    

